worker_processes  1;

events {
	worker_connections  1024;
}

daemon off;

http {

	lua_package_path "/opt/redx/lua/src/lib/plugins/?.lua;/opt/redx/lua/src/lib/?.lua;/opt/redx/lua/conf/?.lua;/opt/redx/lua/src/bin/?.lua;/opt/redx/lua-resty-redis-connector/lib/?.lua;;;";
	lua_package_cpath ";;";

	init_by_lua_file "/opt/redx/lua/src/bin/init_redx.lua";

	# use DNS server as resolver
	resolver 10.0.0.10;

	# fix https://github.com/rstudio/redx/issues/2
	client_body_buffer_size 10m;
	client_max_body_size 10m;

	server {
		# API
		listen 8082;

		lua_code_cache on;
		access_log /dev/null;
		error_log /dev/null;

		location / {
			default_type application/json;
			content_by_lua '
				require("lapis").serve("api")
			';
		}
	}

	server {
		# MAIN
		listen 80;
		listen 443;

		lua_code_cache on;

		access_log /dev/stdout;
		error_log /dev/stdout;

		proxy_set_header X-Forwarded-Port $server_port;
		proxy_set_header X-Forwarded-Proto $scheme;
		proxy_set_header X-Forwarded-Protocol $scheme;
		proxy_set_header X-Real-IP $remote_addr;

		proxy_read_timeout 300s;
		proxy_connect_timeout 3s;
		proxy_buffering off;

		rewrite_log on;

		# set default upstream in case reference not found in redis
		set $upstream 'fallback';

		location /error.html {
			root /opt/redx/html/;
			internal;
		}

		location / {
			access_by_lua '
				-- DISABLE FILE UPLOAD HANDLING BY OPENRESTY (i.e., force pass-through)
				require("resty.upload").new = function(self, chunk_size)
					return nil, nil
				end

				-- CHECK AUTH TOKENS
				local headers = ngx.req.get_headers()
				local check_auth = 
					ngx.var.uri:match("^/api/") and 												-- require auth token for /api/....
					not (
						ngx.var.uri:match("^/api/v1/users/auth/local") or 							-- no auth token for login
						(ngx.var.uri:match("^/api/v1/users") and ngx.req.get_method() == "POST")	-- no auth token for signup
					)
				if check_auth then
					local token = headers["authorization"]
					if token then
						token = token:gsub("Bearer ", "", 1)
						local key = "riox-secret"
						local ok, err = require("luajwt").decode(token, key)
						if not ok then
							ngx.log(0, "Invalid authentication.")
							return ngx.exit(ngx.HTTP_UNAUTHORIZED)
						end
					else
						return ngx.exit(ngx.HTTP_UNAUTHORIZED)
					end
				end

				-- REMOVE SPECIAL HEADERS
				if headers["origin"] == "__internal__" then
					ngx.req.set_header("origin", "__unknown__")
				end

				-- ALL SET, CONTINUE WITH FORWARDING THE REQUEST
				require("lapis").serve("main")
			';

			proxy_http_version 1.1;
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection $http_connection;
			proxy_set_header Host $http_host;
			proxy_set_header Content-Type $http_content_type;
			proxy_set_header X-Forwarded-For "$proxy_add_x_forwarded_for";
			proxy_intercept_errors on;
			error_page 502 /error.html;

			if ($upstream ~ 'fallback') {
				proxy_pass http://$upstream;
				break;
			}

			# make sure nobody hits files from our filesystem
			root /dev/null;
		}

	}
}