worker_processes  1;

events {
    worker_connections  1024;
}

daemon off;
#env OUR_NAMESPACE;

http {

    lua_package_path "/opt/redx/lua/src/lib/plugins/?.lua;/opt/redx/lua/src/lib/?.lua;/opt/redx/lua/conf/?.lua;/opt/redx/lua/src/bin/?.lua;;;";
    lua_package_cpath ";;";

    init_by_lua_file "/opt/redx/lua/src/bin/init_redx.lua";

	# use local dnsmasq as resolver
	resolver 127.0.0.1;

    error_log /dev/stdout;
    access_log /dev/stdout;

	## get current kubernetes namespace from env variable
	#set_by_lua $cur_ns 'return os.getenv("OUR_NAMESPACE")';
	#perl_set $cur_ns 'sub { return $ENV{"OUR_NAMESPACE"}; }';

    upstream fallback {
      server riox-ui.$OUR_NAMESPACE.svc.cluster.local:8081;
    }

    server {
        # API
        listen 8082;

        lua_code_cache on;

        location / {
            default_type application/json;
            content_by_lua '
                require("lapis").serve("api")
            ';
        }
    }

    #server {
    #    # this server is meant to expose only the health check api endpoint so it can be exposed it to the world,
    #    # while still securing the rest of the API.
    #    listen 8082;
    #    location = /health {
    #        proxy_pass http://127.0.0.1:8061/health;
    #        proxy_set_header Host $host;
    #    }
    #}

    server {
        # MAIN
        listen 80;
        listen 443;

        lua_code_cache on;

        proxy_set_header X-Forwarded-Port $server_port;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Protocol $scheme;
        proxy_set_header X-Real-IP $remote_addr;

        proxy_read_timeout 300s;
        proxy_connect_timeout 3s;
        proxy_buffering off;

        rewrite_log on;

        # set default upstream in case reference not found in redis
        set $upstream 'fallback';

        location / {
            access_by_lua '
                require("lapis").serve("main")
            ';

            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $http_host;
            proxy_set_header X-Forwarded-For "$proxy_add_x_forwarded_for";
            proxy_intercept_errors on;
            error_page 502 504 @fallback;
            proxy_pass http://$upstream;
        }

        location @fallback {
            proxy_set_header Host $http_host;
            proxy_set_header X-Forwarded-For "$proxy_add_x_forwarded_for";
            proxy_pass http://fallback;
        }

    }
}