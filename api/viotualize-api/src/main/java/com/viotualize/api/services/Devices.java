package com.viotualize.api.services;

import com.codahale.metrics.annotation.ExceptionMetered;
import com.codahale.metrics.annotation.Timed;
import com.viotualize.api.handlers.command.DeviceCommand;
import com.viotualize.api.handlers.query.DeviceQuery;
import com.viotualize.api.handlers.query.Paged;
import com.viotualize.core.domain.Device;
import com.viotualize.core.domain.DeviceType;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiResponse;
import com.wordnik.swagger.annotations.ApiResponses;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.UriBuilder;

/**
 * @author omoser
 */
@Service
@Path("/devices")
@Api(value = "Devices", description = "CRUD operations for Devices. Devices are virtual representations of physical " +
        "devices, such as sensors, actuators or appliances. Each Device has a specific DeviceType that has to be " +
        "created using the DeviceTypes service before the Device can be created")
public class Devices {

    @Autowired
    DeviceQuery deviceQuery;

    @Autowired
    DeviceCommand deviceCommand;

    @GET
    @Path("/{id}")
    @Produces(MediaType.APPLICATION_JSON)
    @ApiOperation(value = "Retrieve single device",
            notes = "Retrieve device by its ID. Device IDs are auto-generated by the API and cannot be modified",
            response = Device.class)
    @ApiResponses(value = {@ApiResponse(code = 404, message = "No device with given ID found")})
    @Timed
    @ExceptionMetered
    public Response retrieve(@PathParam("id") String deviceId) {
        return Response.ok(deviceQuery.single(deviceId)).build();
    }

    @GET
    @Path("/")
    @Produces(MediaType.APPLICATION_JSON)
    @ApiOperation(value = "Retrieve all Devices",
            notes = "Retrieve all Devices including their children",
            response = DeviceType.class)
    @ApiResponses(value = {
            @ApiResponse(code = 404, message = "No Device with given ID found"),
            @ApiResponse(code = 400, message = "Either the query string or the paging parameters are malformed")
    })
    @Timed
    @ExceptionMetered
    public Response list(@QueryParam("q") String query, @QueryParam("page") int page, @QueryParam("size") int size) {
        return Response.ok(deviceQuery.query(query, new Paged(page, size))).build();
    }

    @POST
    @Path("/")
    @Consumes({MediaType.APPLICATION_JSON})
    @ApiOperation(value = "Created a new Device",
            notes = "Create a new Device according to the provided JSON payload. Device IDs are auto-assigned " +
                    "by the API and cannot be controlled. Please note that referenced DeviceTypes have to exist prior " +
                    "to persisting a Device.Upon successful creation, HTTP 201 and a Location header for the" +
                    " created Device is returned."
    )
    @ApiResponses(value = {
            @ApiResponse(code = 400, message = "Malformed Device provided. See error message for details")
    })
    @Timed
    @ExceptionMetered
    public Response create(Device device) {
    	System.out.println("Creating asset: " + device);
        device = deviceCommand.create(device);
    	System.out.println("Created asset: " + device.getId());
        Response r = Response.created(UriBuilder.fromMethod(Devices.class, "retrieve").build(device.getId())).build();
        System.out.println(r.getEntity());
        return r;
    }

    @PUT
    @Path("/")
    @Consumes({MediaType.APPLICATION_JSON})
    @Produces({MediaType.APPLICATION_JSON})
    @ApiOperation(value = "Update an existing Device",
            notes = "Update an existing Device according to the provided JSON payload. Upon success, HTTP 200 is returned."
    )
    @ApiResponses(value = {
            @ApiResponse(code = 400, message = "Malformed Device provided. See error message for details")
    })
    @Timed
    @ExceptionMetered
    public Response update(Device device) {
        deviceCommand.update(device);
        return Response.ok().build();
    }

    @DELETE
    @Path("/{id}")
    @Produces({MediaType.APPLICATION_JSON})
    @ApiOperation(value = "Delete a Device",
            notes = "Delete an existing Device by its ID. Upon success, HTTP 200 is returned."
    )
    @ApiResponses(value = {
            @ApiResponse(code = 404, message = "No such DeviceType")
    })
    @Timed
    @ExceptionMetered
    public Response delete(@PathParam("id") String deviceId) {
        deviceCommand.delete(deviceId);
        return Response.ok().build();
    }


}
