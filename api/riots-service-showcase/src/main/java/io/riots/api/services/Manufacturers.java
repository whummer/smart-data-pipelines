package io.riots.api.services;

import io.riots.api.handlers.command.ManufacturerCommand;
import io.riots.api.handlers.query.ManufacturerQuery;
import io.riots.api.handlers.query.Paged;
import io.riots.core.model.Manufacturer;

import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.UriBuilder;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.codahale.metrics.annotation.ExceptionMetered;
import com.codahale.metrics.annotation.Timed;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiResponse;
import com.wordnik.swagger.annotations.ApiResponses;

/**
 * @author omoser
 */
@Service
@Path("/manufacturers")
@Api(value = "Manufacturers", description = "CRUD operations for Manufacturers")
/* TODO: needed? merge with SemanticTypes service */
public class Manufacturers {

    @Autowired
    ManufacturerQuery manufacturerQuery;
    
        @Autowired
        ManufacturerCommand ManufacturerCommand;
    
        @GET
        @Path("/{id}")
        @Produces(MediaType.APPLICATION_JSON)
        @ApiOperation(value = "Retrieve single Manufacturer",
                notes = "Retrieve Manufacturer by its ID. Manufacturer IDs are auto-generated by the API and cannot be modified",
                response = Manufacturer.class)
        @ApiResponses(value = {@ApiResponse(code = 404, message = "No Manufacturer with given ID found")})
        @Timed
        @ExceptionMetered
        public Response retrieve(@PathParam("id") String ManufacturerId) {
            return Response.ok(manufacturerQuery.single(ManufacturerId)).build();
        }
    
        @GET
        @Path("/")
        @Produces(MediaType.APPLICATION_JSON)
        @ApiOperation(value = "Retrieve all Manufacturers",
                notes = "Retrieve all Manufacturers including their children",
                response = Manufacturer.class)
        @ApiResponses(value = {
                @ApiResponse(code = 404, message = "No Manufacturer with given ID found"),
                @ApiResponse(code = 400, message = "Either the query string or the paging parameters are malformed")
        })
        @Timed
        @ExceptionMetered
        public Response list(@QueryParam("q") String query, @QueryParam("page") int page, @QueryParam("size") int size) {
            return Response.ok(manufacturerQuery.query(query, new Paged(page, size))).build();
        }
    
        @POST
        @Path("/")
        @Consumes({MediaType.APPLICATION_JSON})
        @Produces({MediaType.APPLICATION_JSON})
        @ApiOperation(value = "Created a new Manufacturer",
                notes = "Create a new Manufacturer according to the provided JSON payload. Manufacturer IDs are auto-assigned " +
                        "by the API and cannot be controlled. Please note that referenced Manufacturers have to exist prior " +
                        "to persisting a Manufacturer.Upon successful creation, HTTP 201 and a Location header for the" +
                        " created Manufacturer is returned."
        )
        @ApiResponses(value = {
                @ApiResponse(code = 400, message = "Malformed Manufacturer provided. See error message for details")
        })
        @Timed
        @ExceptionMetered
        public Response create(Manufacturer Manufacturer) {
            Manufacturer = ManufacturerCommand.create(Manufacturer);
            return Response.created(UriBuilder.fromPath(
            		"/categories/{id}").build(Manufacturer.getId())).build();
        }
    
        @PUT
        @Path("/")
        @Consumes({MediaType.APPLICATION_JSON})
        @Produces({MediaType.APPLICATION_JSON})
        @ApiOperation(value = "Update an existing Manufacturer",
                notes = "Update an existing Manufacturer according to the provided JSON payload. Upon success, HTTP 200 is returned."
        )
        @ApiResponses(value = {
                @ApiResponse(code = 400, message = "Malformed Manufacturer provided. See error message for details")
        })
        @Timed
        @ExceptionMetered
        public Response update(Manufacturer Manufacturer) {
            ManufacturerCommand.update(Manufacturer);
            return Response.ok().build();
        }
    
        @DELETE
        @Path("/{id}")
        @Produces({MediaType.APPLICATION_JSON})
        @ApiOperation(value = "Delete a Manufacturer",
                notes = "Delete an existing Manufacturer by its ID. Upon success, HTTP 200 is returned."
        )
        @ApiResponses(value = {
                @ApiResponse(code = 404, message = "No such Manufacturer")
        })
        @Timed
        @ExceptionMetered
        public Response delete(@PathParam("id") String ManufacturerId) {
            ManufacturerCommand.delete(ManufacturerId);
            return Response.ok().build();
        }

}
