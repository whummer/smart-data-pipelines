package io.riots.api.services;

import io.riots.api.handlers.command.AssetCategoryCommand;
import io.riots.api.handlers.query.AssetCategoryQuery;
import io.riots.api.handlers.query.Paged;
import io.riots.api.model.AssetCategory;

import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.UriBuilder;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.codahale.metrics.annotation.ExceptionMetered;
import com.codahale.metrics.annotation.Timed;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiResponse;
import com.wordnik.swagger.annotations.ApiResponses;

/**
 * @author omoser
 */
@Service
@Path("/categories")
@Api(value = "AssetCategories", description = "CRUD operations for AssetCategories. AssetCategories are " +
		"composable named entities which allow to group and categorize/organize the asset types and devices types.")
public class AssetCategories {

    @Autowired
    AssetCategoryQuery _query;

    @Autowired
    AssetCategoryCommand _command;

    @GET
    @Path("/{id}")
    @Produces(MediaType.APPLICATION_JSON)
    @ApiOperation(value = "Retrieve single AssetCategory",
            notes = "Retrieve AssetCategory by its ID. AssetCategory IDs are auto-generated by the API "
            		+ "upon AssetCategory creation and cannot be modified. ",
            response = AssetCategory.class)
    @ApiResponses(value = {@ApiResponse(code = 404, message = "No category with given ID found")})
    @Timed
    @ExceptionMetered
    public Response retrieve(@PathParam("id") String id) {
        return Response.ok(_query.single(id)).build();
    }

    @GET
    @Path("/")
    @Produces(MediaType.APPLICATION_JSON)
    @ApiOperation(value = "Retrieve all categories",
            notes = "Retrieve all AssetCategory entities including their children",
            response = AssetCategory.class)
    @ApiResponses(value = {
            @ApiResponse(code = 400, message = "Either the query string or the paging parameters are malformed")
    })
    @Timed
    @ExceptionMetered
    public Response list(@QueryParam("q") String query, @QueryParam("page") int page, @QueryParam("size") int size) {
        return Response.ok(_query.query(query, new Paged(page, size))).build();
    }

    @POST
    @Path("/")
    @Consumes({MediaType.APPLICATION_JSON})
    @Produces({MediaType.APPLICATION_JSON})
    @ApiOperation(value = "Created a new asset category",
            notes = "Create a new AssetCategory according to the provided JSON payload. AssetCategory IDs are auto-assigned " +
                    "by the API and cannot be controlled. Upon successful creation, HTTP 201 and a Location header for the" +
                    " created AssetCategory is returned."
    )
    @ApiResponses(value = {
            @ApiResponse(code = 400, message = "Malformed AssetCategory provided. See error message for details")
    })
    @Timed
    @ExceptionMetered
    public Response create(AssetCategory entity) {
        entity = _command.create(entity);
        return Response.created(UriBuilder.fromPath(
        		"/categories/{id}").build(entity.getId())).build();
    }

    @PUT
    @Path("/")
    @Consumes({MediaType.APPLICATION_JSON})
    @Produces({MediaType.APPLICATION_JSON})
    @ApiOperation(value = "Update an existing AssetCategory",
            notes = "Update an existing AssetCategory according to the provided JSON payload. Upon success, HTTP 200 is returned."
    )
    @ApiResponses(value = {
            @ApiResponse(code = 400, message = "Malformed AssetCategory provided. See error message for details")
    })
    @Timed
    @ExceptionMetered
    public Response update(AssetCategory deviceType) {
        _command.update(deviceType);
        return Response.ok().build();
    }

    @DELETE
    @Path("/{id}")
    @Produces({MediaType.APPLICATION_JSON})
    @ApiOperation(value = "Delete a AssetCategory",
            notes = "Delete an existing AssetCategory by its ID. Upon success, HTTP 200 is returned."
    )
    @ApiResponses(value = {
            @ApiResponse(code = 404, message = "No such AssetCategory")
    })
    @Timed
    @ExceptionMetered
    public Response delete(@PathParam("id") String id) {
        _command.delete(id);
        return Response.ok().build();
    }
}
