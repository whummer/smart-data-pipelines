package io.riots.api.services;

import io.riots.api.handlers.command.DeviceTypeCommand;
import io.riots.api.handlers.command.ManufacturerCommand;
import io.riots.api.handlers.command.PropertyCommand;
import io.riots.api.handlers.command.SemanticTypeCommand;
import io.riots.api.handlers.query.DeviceTypeQuery;
import io.riots.api.handlers.query.Paged;
import io.riots.api.handlers.query.PropertyQuery;
import io.riots.api.services.auth.AuthPermissionChecker;
import io.riots.core.model.DeviceType;
import io.riots.core.model.Permission.Operation;
import io.riots.core.model.Permission.Target;
import io.riots.core.model.Property;
import io.riots.core.model.Role;
import io.riots.core.model.SemanticType;
import io.riots.core.model.SemanticType.SemanticPropertyType;
import io.riots.core.repositories.DeviceTypeRepository;
import io.riots.core.repositories.SemanticTypeRepository;

import java.net.URI;
import java.util.List;

import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.UriBuilder;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Service;

import com.codahale.metrics.annotation.ExceptionMetered;
import com.codahale.metrics.annotation.Timed;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiResponse;
import com.wordnik.swagger.annotations.ApiResponses;

/**
 * @author omoser
 * @author whummer
 */
@Service
@Path("/device-types")
@Api(value = "DeviceTypes", description = "CRUD operations for DeviceTypes. DeviceTypes are class-based, generic " +
        "entities that can be reused, whereas Devices are instance level representations of physical devices.")
public class DeviceTypes {

    @Autowired
    DeviceTypeQuery deviceTypeQuery;
    @Autowired
    DeviceTypeCommand deviceTypeCommand;
    @Autowired
    PropertyQuery propertyQuery;
    @Autowired
    PropertyCommand propertyCommand;
    @Autowired
    SemanticTypeCommand semCommand;
    @Autowired
    ManufacturerCommand manufCommand;

	@Autowired
	AuthPermissionChecker authChecker;

    @Autowired
    DeviceTypeRepository repository;

    @Autowired
    SemanticTypeRepository semRepo;

    @GET
    @Path("/{id}")
    @Produces(MediaType.APPLICATION_JSON)
    @ApiOperation(value = "Retrieve single DeviceType",
            notes = "Retrieve DeviceType by its ID. Device IDs are auto-generated by the API upon DeviceType creation " +
                    "and cannot be modified. ",
            response = DeviceType.class)
    @ApiResponses(value = {@ApiResponse(code = 404, message = "No device with given ID found")})
    @Timed
    @ExceptionMetered
    public Response retrieve(@PathParam("id") String deviceTypeId) {
        return Response.ok(deviceTypeQuery.single(deviceTypeId)).build();
    }

    @GET
    @Path("/")
    @Produces(MediaType.APPLICATION_JSON)
    @ApiOperation(value = "Retrieve all DeviceTypes",
            notes = "Retrieve all DeviceTypes including their children",
            response = DeviceType.class)
    @ApiResponses(value = {
            @ApiResponse(code = 400, message = "Either the query string or the paging parameters are malformed")
    })
    @Timed
    @ExceptionMetered
    @PreAuthorize("hasRole('" + Role.ROLE_USER + "')")
    public Response list(@QueryParam("q") String query, @QueryParam("page") int page, @QueryParam("size") int size) {
        return Response.ok(deviceTypeQuery.query(query, new Paged(page, size))).build();
    }

    @POST
    @Path("/")
    @Consumes({MediaType.APPLICATION_JSON})
    @Produces({MediaType.APPLICATION_JSON})
    @ApiOperation(value = "Created a new DeviceType",
            notes = "Create a new DeviceType according to the provided JSON payload. DeviceType IDs are auto-assigned " +
                    "by the API and cannot be controlled. Upon successful creation, HTTP 201 and a Location header for the" +
                    " created DeviceType is returned."
    )
    @ApiResponses(value = {
            @ApiResponse(code = 400, message = "Malformed DeviceType provided. See error message for details")
    })
    @Timed
    @ExceptionMetered
    public Response create(DeviceType deviceType) {
    	/* ensure that all referenced types are valid DB refs */
    	checkSemanticTypesExistence(deviceType);
    	/* set the creator of the new device type */
    	deviceType.setCreator(authChecker.getRequestingUser());
    	/* save the new device type */
        deviceType = deviceTypeCommand.create(deviceType);
        //String location = UriBuilder.fromMethod(DeviceTypes.class, "retrieve"); // todo check why this is not working
        URI location = UriBuilder.fromPath("/device-types/{id}").build(deviceType.getId());
        return Response.created(location).build();
    }

    /**
     * Loop over all objects associated with this device 
     * type and insert into DB, if necessary.
     * @param t
     */
    private void checkSemanticTypesExistence(DeviceType t) {
    	/* check semantic types of properties */
    	for(Property<?> prop : t.getDeviceProperties()) {
    		if(prop.getSemanticType() != null) {
    			if(prop.getSemanticType().getId() == null) {
    				prop.setSemanticType((SemanticPropertyType) 
    						semCommand.getOrCreate(prop.getSemanticType()));
    			}
    		}
    	}
    	/* check manufacturer */
    	if(t.getManufacturer() != null) {
			if(t.getManufacturer().getId() == null) {
				t.setManufacturer(manufCommand.getOrCreate(t.getManufacturer()));
			}
		}
    }

    @PUT
    @Path("/")
    @Consumes({MediaType.APPLICATION_JSON})
    @Produces({MediaType.APPLICATION_JSON})
    @ApiOperation(value = "Update an existing DeviceType",
            notes = "Update an existing DeviceType according to the provided JSON payload. Upon success, HTTP 200 is returned."
    )
    @ApiResponses(value = {
            @ApiResponse(code = 400, message = "Malformed DeviceType provided. See error message for details")
    })
    @Timed
    @ExceptionMetered
    public Response update(DeviceType deviceType) {
        deviceTypeCommand.update(deviceType);
		return Response.ok().build();
    }

    @DELETE
    @Path("/{id}")
    @Produces({MediaType.APPLICATION_JSON})
    @ApiOperation(value = "Delete a DeviceType",
            notes = "Delete an existing DeviceType by its ID. Upon success, HTTP 200 is returned."
    )
    @ApiResponses(value = {
            @ApiResponse(code = 404, message = "No such DeviceType")
    })
    @Timed
    @ExceptionMetered
    @PreAuthorize(Role.HAS_ROLE_USER + " and "
    		+ "hasPermission(#itemId, '" + Target.DEVICE_TYPE + "', '" + Operation.DELETE + "')")
    public Response delete(@PathParam("id") String itemId) {
        deviceTypeCommand.delete(itemId);
        return Response.ok().build();
    }

    @POST
    @Path("/{deviceTypeId}/properties")
    @Produces({MediaType.APPLICATION_JSON})
    @ApiOperation(value = "Add a Property to a DeviceType",
            notes = "Add a Property and add it to the given DeviceType. "
            		+ "Upon success, HTTP 200 is returned."
    )
    @ApiResponses(value = {
            @ApiResponse(code = 404, message = "No such DeviceType")
    })
    @Timed
    @ExceptionMetered
    public Response addPropertyToDeviceType(
    		@PathParam("deviceTypeId") String deviceTypeId, Property<?> property) {
    	DeviceType deviceType = deviceTypeQuery.single(deviceTypeId);
    	property = propertyCommand.create(property);
    	deviceType.getDeviceProperties().add(property);
    	deviceTypeCommand.update(deviceType);
        return Response.ok().build();
    }

    @DELETE
    @Path("/{deviceTypeId}/properties/{propertyId}")
    @Produces({MediaType.APPLICATION_JSON})
    @ApiOperation(value = "Delete a Property from a DeviceType",
            notes = "Delete an existing Property and remove it from the given DeviceType. "
            		+ "Upon success, HTTP 200 is returned."
    )
    @ApiResponses(value = {
            @ApiResponse(code = 404, message = "No such Property or DeviceType")
    })
    @Timed
    @ExceptionMetered
    public Response deletePropertyFromDeviceType(
    		@PathParam("deviceTypeId") String deviceTypeId, 
    		@PathParam("propertyId") String propertyId) {
    	DeviceType deviceType = deviceTypeQuery.single(deviceTypeId);
    	List<Property<?>> props = deviceType.getDeviceProperties();
    	for(int i = 0; i < props.size(); i ++) {
    		Property<?> prop = props.get(i);
    		if(prop.getId().equals(propertyId)) {
            	props.remove(i);
            	break;
    		}
    	}
    	deviceTypeCommand.update(deviceType);
    	deleteProperty(propertyId);
        return Response.ok().build();
    }

    /* DEVICE TYPE PROPERTIES */

    @GET
    @Path("/properties/{id}")
    @Produces(MediaType.APPLICATION_JSON)
    @ApiOperation(value = "Retrieve a property of a DeviceType",
            notes = "Retrieve a property of a DeviceType, given by its ID.",
            response = Property.class)
    @ApiResponses(
    		value = {@ApiResponse(code = 404, message = "No property type with given ID found")}
    )
    @Timed
    @ExceptionMetered
    public Response retrieveProperties(@PathParam("id") String itemId) {
    	Property<?> item = propertyQuery.single(itemId);
        return Response.ok(item).build();
    }

    @POST
    @Path("/properties")
    @Consumes({MediaType.APPLICATION_JSON})
    @ApiOperation(value = "Create a new Property for a DeviceType",
            notes = "Create a new device type Property according to the provided JSON payload."
            		+ "Upon successful creation, HTTP 201 and a Location header for the" +
                    " created Property is returned."
    )
    @ApiResponses(value = {
            @ApiResponse(code = 400, message = "Malformed Property provided. See error message for details")
    })
    @Timed
    @ExceptionMetered
    public Response createProperty(Property<?> property) {
        property = propertyCommand.create(property);
        URI location = UriBuilder.fromPath(
        		"/device-types/properties/{id}").build(property.getId());
        return Response.created(location).build();
    }

    @PUT
    @Path("/properties")
    @Consumes({MediaType.APPLICATION_JSON})
    @Produces({MediaType.APPLICATION_JSON})
    @ApiOperation(value = "Update a Property for a DeviceType",
            notes = "Update a device type Property according to the provided JSON payload."
    )
    @ApiResponses(value = {
            @ApiResponse(code = 400, message = "Malformed Property provided. See error message for details")
    })
    @Timed
    @ExceptionMetered
    public Response updateProperty(Property<?> property) {
        property = propertyCommand.update(property);
		return Response.ok().build();
    }

    @DELETE
    @Path("/properties/{id}")
    @Produces({MediaType.APPLICATION_JSON})
    @ApiOperation(value = "Delete a Property",
            notes = "Delete an existing Property by its ID. Upon success, HTTP 200 is returned."
    )
    @ApiResponses(value = {
            @ApiResponse(code = 404, message = "No such Property")
    })
    @Timed
    @ExceptionMetered
    public Response deleteProperty(@PathParam("id") String itemId) {
    	propertyCommand.delete(itemId);
        return Response.ok().build();
    }

    /* PROPERTY DETAILS */

    @GET
    @Path("/properties/semantic-types")
    @Produces(MediaType.APPLICATION_JSON)
    @ApiOperation(value = "List of semantic property types.",
            notes = "Retrieve a list of all known semantic property types.",
            response = SemanticType.class)
    @Timed
    @ExceptionMetered
    public Response listSemanticPropertyTypes() {
        return Response.ok(semRepo.findByCategory(
        		SemanticType.CATEGORY_PROPERTY)).build();
    }

}
