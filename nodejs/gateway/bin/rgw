#!/usr/bin/env sh
':' //; exec "$(command -v nodejs || command -v node)" --expose-gc --always-compact -- "$0" "$@"

'use strict';

var fs = require('fs'),
    path = require('path'),
    // cluster = require('cluster'),
    logger = require('../lib/logging'),
    util = require('util'),
    argv = require('minimist')(process.argv.slice(2)),
    Config = require('../lib/config/config'),
    // master = require('../lib/master'),
    Worker = require('../lib/worker');

var help = [
    'usage: rgw [options]',
    '',
    'Starts a rgw server',
    '',
    'options:',
    '   -c, --config CONFIGFILE     Location of the configuration file',
    '   -d, --dry                   Test configuration and exit (doesn\'t actually start rgw)',
    '   -h, --help                  Display help'
].join('\n');

if (argv.h || argv.help) {
    return util.puts(help);
}

/* load environment config */
process.env.RIOX_ENV = process.env.RIOX_ENV || "development";
global.config = require("../lib/config/environment");

var configFile = argv.c || argv.config;

if (!configFile) {
    configFile = path.resolve(__dirname, '..', 'config', 'config.json');
    if (process.env.SETTINGS_FLAVOR !== undefined) {
        configFile = configFile.replace(/\.json$/, '_' + process.env.SETTINGS_FLAVOR + '.json');
    }
}

util.log('Loading config from ' + configFile);

fs.readFile(configFile, function (err, data) {
    if (err) {
        throw new Error('Couldn\'t locate requested config file at: ' + configFile);
    }

    var config;
    try {
        config = new Config(data);
    } catch (e) {
        util.log('Failed loading your configuration!');
        throw e;
    }

    // Wait for configuration to say ready...
    config.once('ready', function () {

        if (argv.d || argv.dry) {
            util.log('Configuration file looks ok. Here is the result:');
            util.log(config.inspect());
            return;
        }

        // if (cluster.isMaster) {
        //    // Run the master
        //    var m = master(config);
        //     m.run();
        //    util.log('Server is running.');
        // } else {
            // Run the worker
            var w = new Worker(config);
            w.run();
        // }
    });
});
